// This file is copied and modified from The LLVM Compiler Infrastructure, which
// is distributed under the Apache License v2.0 with LLVM Exceptions (see
// LICENSE.TXT for details). This file is licensed under the same license.

#ifndef LLVM_LIB_TARGET_TEMPLE_TEMPLESUBTARGET_H
#define LLVM_LIB_TARGET_TEMPLE_TEMPLESUBTARGET_H

#include "TempleFrameLowering.h"
#include "TempleISelLowering.h"
#include "TempleInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "TempleGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class TempleSubtarget : public TempleGenSubtargetInfo {
  virtual void anchor();
  TempleFrameLowering FrameLowering;
  TempleInstrInfo InstrInfo;
  TempleRegisterInfo RegInfo;
  TempleTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  TempleSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  TempleSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                  const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TempleFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const TempleInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TempleRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const TempleTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  bool enableMachineScheduler() const override { return true; }
};
} // namespace llvm

#endif
